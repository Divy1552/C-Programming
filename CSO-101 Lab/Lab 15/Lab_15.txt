Q1: Greater Than Neighbors
    
    Given an array of integers, count how many elements are strictly greater than their immediate neighbors.
    
    Rules:

    - The first element is counted if it is greater than the second element.
    - The last element is counted if it is greater than the second-last element.
    - All other elements are counted if they are strictly greater than both their previous and next elements.

    Input:
    
    The first line contains an integer n (1 <= n <= 1000) - the size of the array.
    The second line contains n integers a1, a2, ..., an (1 <= ai <= 10^9).

    Output:

    Print a single integer - the number of elements satisfying the conditions.

    Example:    Input:
                5
                1 3 2 5 4

                Output:
                2

Q2: Cloudberry Jam Calculation

    To make jam from cloudberries, you take equal amounts of berries and sugar and cook them.

    From x kg of berries and x kg of sugar, only (3/4)*(2x) kg of jam remains due to evaporation.

    How many kilograms of cloudberries are needed to prepare n 3-kilogram jars of jam?
    
    Input:
    
    The first line contains an integer t (1 <= t <= 10^4) - the number of test cases.
    Each of the next t lines contains a single integer n (1 <= n <= 10^8) - the number of jars.

    Output:

    For each test case, print a single integer - the kilograms of cloudberries needed.

    Example:    Input:
                2
                1
                3

                Output:
                2
                6

Q3: Structures in C
    
    Define a structure in C called 'Book' that stores the following information:

    - Title (string)
    - Author (string)
    - Year of publication (integer)
    - Price (float)

    Write a program to:
    
    - Read information of 3 books from the user.
    - Print the details of the book with the highest price.

Q4: Pointer Arithmetic
    
    Write a C program that:

    - Reads an array of 5 integers from the user.
    - Uses pointers to reverse the array in place.
    - Prints the reversed array using pointer notation.

    Do not use array indexing (like arr[i]); use only pointer arithmetic.